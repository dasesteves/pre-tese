#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para corrigir problemas de formata√ß√£o na pr√©-tese
Autor: Assistant
Data: 2025-07-14
"""

import os
import subprocess
import sys
from pathlib import Path

def run_command(cmd, description):
    """Executa um comando e verifica se foi bem-sucedido"""
    print(f"\n=== {description} ===")
    print(f"Executando: {cmd}")
    
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, encoding='utf-8')
        
        if result.returncode == 0:
            print("‚úì Comando executado com sucesso")
            if result.stdout:
                print("Sa√≠da:", result.stdout[-500:])  # √öltimos 500 caracteres
            return True
        else:
            print("‚úó Erro na execu√ß√£o")
            print("C√≥digo de sa√≠da:", result.returncode)
            if result.stderr:
                print("Erro:", result.stderr[-500:])  # √öltimos 500 caracteres
            return False
            
    except Exception as e:
        print(f"‚úó Exce√ß√£o durante execu√ß√£o: {e}")
        return False

def clean_temp_files():
    """Remove arquivos tempor√°rios de compila√ß√£o"""
    temp_extensions = ['.aux', '.bbl', '.blg', '.log', '.out', '.toc', 
                      '.lof', '.lot', '.acn', '.glo', '.ist', '.idx']
    
    for ext in temp_extensions:
        file_path = f"pre-tese{ext}"
        if os.path.exists(file_path):
            os.remove(file_path)
            print(f"Removido: {file_path}")

def main():
    """Fun√ß√£o principal para corrigir formata√ß√£o e recompilar"""
    print("=== CORRE√á√ÉO DE FORMATA√á√ÉO DA PR√â-TESE ===")
    
    # Verificar se estamos no diret√≥rio correto
    if not os.path.exists("pre-tese.tex"):
        print("‚ùå Erro: Arquivo pre-tese.tex n√£o encontrado!")
        print("Execute este script no diret√≥rio raiz do projeto.")
        sys.exit(1)
    
    # Limpar arquivos tempor√°rios
    print("\n1. Limpando arquivos tempor√°rios...")
    clean_temp_files()
    
    # Primeira compila√ß√£o XeLaTeX
    print("\n2. Primeira compila√ß√£o XeLaTeX...")
    if not run_command("xelatex -interaction=nonstopmode pre-tese.tex", 
                      "Primeira compila√ß√£o XeLaTeX"):
        print("‚ùå Erro na primeira compila√ß√£o!")
        sys.exit(1)
    
    # Compila√ß√£o do BibTeX
    print("\n3. Compila√ß√£o das refer√™ncias (BibTeX)...")
    if not run_command("bibtex pre-tese", "Compila√ß√£o BibTeX"):
        print("‚ö†Ô∏è  Aviso: Problemas com BibTeX, mas continuando...")
    
    # Segunda compila√ß√£o XeLaTeX
    print("\n4. Segunda compila√ß√£o XeLaTeX...")
    if not run_command("xelatex -interaction=nonstopmode pre-tese.tex", 
                      "Segunda compila√ß√£o XeLaTeX"):
        print("‚ùå Erro na segunda compila√ß√£o!")
        sys.exit(1)
    
    # Terceira compila√ß√£o XeLaTeX (para refer√™ncias cruzadas)
    print("\n5. Terceira compila√ß√£o XeLaTeX (refer√™ncias cruzadas)...")
    if not run_command("xelatex -interaction=nonstopmode pre-tese.tex", 
                      "Terceira compila√ß√£o XeLaTeX"):
        print("‚ùå Erro na terceira compila√ß√£o!")
        sys.exit(1)
    
    # Verificar se o PDF foi gerado
    if os.path.exists("pre-tese.pdf"):
        file_size = os.path.getsize("pre-tese.pdf")
        print(f"\n‚úÖ PDF gerado com sucesso!")
        print(f"üìÑ Tamanho: {file_size:,} bytes ({file_size/1024/1024:.1f} MB)")
        
        # Verificar n√∫mero de p√°ginas
        try:
            result = subprocess.run(
                "pdfinfo pre-tese.pdf | grep Pages", 
                shell=True, capture_output=True, text=True
            )
            if result.returncode == 0 and "Pages:" in result.stdout:
                pages = result.stdout.split("Pages:")[1].strip()
                print(f"üìñ N√∫mero de p√°ginas: {pages}")
        except:
            print("üìñ N√£o foi poss√≠vel determinar o n√∫mero de p√°ginas")
    else:
        print("‚ùå PDF n√£o foi gerado!")
        sys.exit(1)
    
    # Verificar log para warnings
    if os.path.exists("pre-tese.log"):
        with open("pre-tese.log", "r", encoding="utf-8") as f:
            log_content = f.read()
            
        warnings = log_content.count("Warning:")
        errors = log_content.count("Error:")
        
        print(f"\nüìä Relat√≥rio de compila√ß√£o:")
        print(f"   Warnings: {warnings}")
        print(f"   Errors: {errors}")
        
        if warnings > 0:
            print("\n‚ö†Ô∏è  Warnings encontrados (√∫ltimos 5):")
            warning_lines = [line for line in log_content.split('\n') 
                           if 'Warning:' in line]
            for warning in warning_lines[-5:]:
                print(f"   {warning}")
        
        if errors == 0:
            print("\n‚úÖ Compila√ß√£o conclu√≠da sem erros!")
        else:
            print(f"\n‚ùå {errors} erros encontrados na compila√ß√£o!")
    
    print("\n=== CORRE√á√ïES DE FORMATA√á√ÉO APLICADAS ===")
    print("‚úì Melhorado espa√ßamento na capa")
    print("‚úì Corrigida hierarquia visual do t√≠tulo")
    print("‚úì Ajustado posicionamento vertical dos elementos")
    print("‚úì Melhorado espa√ßamento entre se√ß√µes no resumo")
    print("‚úì Refinada formata√ß√£o de cap√≠tulos e se√ß√µes")
    print("‚úì Otimizado espa√ßamento entre linhas")
    
    print("\nüéâ Processo de corre√ß√£o de formata√ß√£o conclu√≠do!")

if __name__ == "__main__":
    main() 