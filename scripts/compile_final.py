#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para compila√ß√£o final completa do documento
Limpa arquivos tempor√°rios e compila o documento final
"""

import os
import subprocess
import glob
import sys

def cleanup_temp_files():
    """Remove arquivos tempor√°rios de compila√ß√£o"""
    temp_extensions = ['.aux', '.bbl', '.blg', '.log', '.out', '.toc', '.lof', '.lot', '.idx', '.glo', '.acn']
    
    print("üßπ Limpando arquivos tempor√°rios...")
    
    for ext in temp_extensions:
        files = glob.glob(f"pre-tese{ext}")
        for file in files:
            try:
                os.remove(file)
                print(f"   ‚úì Removido: {file}")
            except FileNotFoundError:
                pass
    
    print("   ‚úì Limpeza conclu√≠da!")

def run_command(cmd, description):
    """Executa um comando e retorna o resultado"""
    print(f"üîß {description}...")
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        if result.returncode != 0:
            print(f"   ‚ö†Ô∏è  Warning: {description} completou com c√≥digo {result.returncode}")
        else:
            print(f"   ‚úì {description} bem-sucedido!")
        return result.returncode == 0
    except Exception as e:
        print(f"   ‚ùå Erro em {description}: {e}")
        return False

def compile_document():
    """Compila o documento XeLaTeX completo"""
    print("\nüìÑ Iniciando compila√ß√£o completa...")
    
    # Primeira compila√ß√£o
    if not run_command("xelatex -interaction=nonstopmode pre-tese.tex", "Primeira compila√ß√£o XeLaTeX"):
        return False
    
    # Processamento de bibliografia
    if not run_command("bibtex pre-tese", "Processamento de bibliografia"):
        return False
    
    # Segunda compila√ß√£o
    if not run_command("xelatex -interaction=nonstopmode pre-tese.tex", "Segunda compila√ß√£o XeLaTeX"):
        return False
    
    # Terceira compila√ß√£o (final)
    if not run_command("xelatex -interaction=nonstopmode pre-tese.tex", "Terceira compila√ß√£o XeLaTeX"):
        return False
    
    return True

def check_output():
    """Verifica se o PDF foi gerado corretamente"""
    pdf_file = "pre-tese.pdf"
    if os.path.exists(pdf_file):
        size = os.path.getsize(pdf_file)
        print(f"\nüìã PDF gerado com sucesso!")
        print(f"   üìÑ Arquivo: {pdf_file}")
        print(f"   üíæ Tamanho: {size:,} bytes ({size/1024/1024:.1f} MB)")
        
        # Contar p√°ginas atrav√©s do log
        log_file = "pre-tese.log"
        if os.path.exists(log_file):
            with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
                log_content = f.read()
                if "Output written on" in log_content:
                    for line in log_content.split('\n'):
                        if "Output written on" in line and "pages" in line:
                            print(f"   üìñ {line.strip()}")
                            break
        
        return True
    else:
        print(f"\n‚ùå PDF n√£o foi gerado!")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üéØ COMPILA√á√ÉO FINAL DO DOCUMENTO")
    print("=" * 50)
    
    # Verificar se estamos no diret√≥rio correto
    if not os.path.exists("pre-tese.tex"):
        print("‚ùå Erro: Arquivo pre-tese.tex n√£o encontrado!")
        print("   Execute este script no diret√≥rio raiz do projeto.")
        sys.exit(1)
    
    # Etapa 1: Limpeza
    cleanup_temp_files()
    
    # Etapa 2: Compila√ß√£o
    if compile_document():
        print("\nüéâ COMPILA√á√ÉO CONCLU√çDA COM SUCESSO!")
        
        # Etapa 3: Verifica√ß√£o
        if check_output():
            print("\n‚úÖ Documento pronto para submiss√£o!")
            print("   O arquivo pre-tese.pdf foi gerado sem erros.")
        else:
            print("\n‚ö†Ô∏è  Documento compilado mas com problemas no PDF.")
            sys.exit(1)
    else:
        print("\n‚ùå FALHA NA COMPILA√á√ÉO!")
        print("   Verifique os erros acima e tente novamente.")
        sys.exit(1)

if __name__ == "__main__":
    main() 